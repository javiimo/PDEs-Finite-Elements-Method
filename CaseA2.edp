// Case a
func fa = - 4;
func ga = (x - 3/2)^2 + (y +1)^2;
// Exact solution case a
func uexa = (x - 3/2)^2 + (y +1)^2;
func dxuexa = 2*(x - 3/2);
func dyuexa = 2*(y +1);

//Create an empty txt file to output the errors and convergence rate
ofstream file("CaseA2_Report.txt");
int n, m = 4, i;
real[int] errInf(m+1), errL2(m+1), errL2Grad(m+1);
for (i = 0; i <= m; i++) {
    n = 4 * 2^i;
    // We build the mesh
    real h = 1.0/n;  
    mesh Th;
    for (int j = 0; j < n; j += 2) {
        for (int k = 0; k < n; k += 2) {
            real x0 = k * h;
            real y0 = j * h;
            real x1 = k * h + 2 * h;
            real y1 = j * h + 2 * h;
            int[int] labs(4);
            
            // Define labels based on location of borders
            labs = [0, 0, 0, 0];  // default interior
            if (j == 0) labs[0] = 1;  // bottom edge
            if (j == n-2) labs[2] = 1;  // top edge
            if (k == 0) labs[3] = 1;  // left edge
            if (k == n-2) labs[1] = 1;  // right edge

            mesh Thaux = square(2, 2, [x0 + (x1 - x0) * x, y0 + (y1 - y0) * y], flags=3, label=labs);
            Th = Th + Thaux;
        }
    }
    fespace Vh(Th, P1);
    Vh u, v;
    // Interpolating the exact solution onto the FE space:
    Vh uexaInterp;
    uexaInterp = uexa; 
    //Solve
    //solve Poisson(u, v) = int2d(Th)(dx(u) * dx(v) + dy(u) * dy(v))
    //                    - int2d(Th)(fa * v) + on(1, u=ga);
    
    // Solve algebraically with symmetric stiffness matrix
    varf a(u,v) = int2d(Th)(dx(u) * dx(v) + dy(u) * dy(v)) 
                + int2d(Th)(fa * v) + on(1, u=ga); 
    matrix MA = a(Vh,Vh,tgv=-1);
    real[int] rhsA = a(0,Vh,tgv=-1.);

    varf dirichletBC(u,v) = on(1, u=ga);
    real[int] bc = dirichletBC(0,Vh,tgv=-1);
    matrix MS = a(Vh,Vh,tgv=-2.);
    matrix MD = MS-MA;
    real[int] rhsS = MD*bc;
    rhsS += rhsA;
    u[] = MS^-1*rhsS;


    //Compute the errors
    errL2[i] = sqrt(int2d(Th)((u - uexaInterp)^2));
    errL2Grad[i] = sqrt(int2d(Th)((dx(u) - 
                   dx(uexaInterp))^2 + (dy(u) - dy(uexaInterp))^2));
    // Compute the difference array
    real[int] diff = u[] - uexaInterp[];
    // Compute the L-infinity norm of the difference
    errInf[i] = diff.linfty;


    cout << "errInf = " << errInf[i] << endl;
    cout << "errL2 = " << errL2[i] << endl;
    cout << "errL2Grad = " << errL2Grad[i] << endl;
    
    //Write errors to report file
    file << "FOR h = " << "1/" << n << endl;
    file << "errInf = " << errInf[i] << endl;
    file << "errL2 = " << errL2[i] << endl;
    file << "errL2Grad = " << errL2Grad[i] << endl;
    file << endl;


    plot(Th, wait=true);
    plot(u, wait=true, fill=true, value=1);
    if (i == m)
        cout << "PLOTING 3D" << endl;
        plot(Th, u, dim=3, fill=1, WindowIndex=1);
}
real rateL2 = log(errL2[m-1] / errL2[m]) / log(2.0);
real rateInf = log(errInf[m-1] / errInf[m]) / log(2.0);
real rateL2Grad = log(errL2Grad[m-1] / errL2Grad[m]) / log(2.0);
cout << "convergence rate Inf = " << rateInf << endl;
cout << "convergence rate L2 = " << rateL2 << endl; 
cout << "convergence rate L2Grad = " << rateL2Grad << endl; 

//Write convergence rate to report file
file << "convergence rate Inf = " << rateInf << endl;
file << "convergence rate L2 = " << rateL2 << endl; 
file << "convergence rate L2Grad = " << rateL2Grad << endl; 